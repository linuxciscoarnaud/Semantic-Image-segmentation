/**
 * 
 */
package com.neuronalstructuressegmentation;

import org.deeplearning4j.nn.conf.ComputationGraphConfiguration;
import org.deeplearning4j.nn.conf.ConvolutionMode;
import org.deeplearning4j.nn.conf.NeuralNetConfiguration;
import org.deeplearning4j.nn.conf.distribution.TruncatedNormalDistribution;
import org.deeplearning4j.nn.conf.graph.MergeVertex;
import org.deeplearning4j.nn.conf.inputs.InputType;
import org.deeplearning4j.nn.conf.layers.CnnLossLayer;
import org.deeplearning4j.nn.conf.layers.ConvolutionLayer;
import org.deeplearning4j.nn.conf.layers.DropoutLayer;
import org.deeplearning4j.nn.conf.layers.SubsamplingLayer;
import org.deeplearning4j.nn.conf.layers.Upsampling2D;
import org.deeplearning4j.nn.graph.ComputationGraph;
import org.nd4j.linalg.activations.Activation;
import org.nd4j.linalg.lossfunctions.LossFunctions;

/**
 * @author Arnaud
 *
 */

public class NetworkConfig {

	Params params = new Params();
	
	public ComputationGraph getNetworkConfig() {
		
		ComputationGraphConfiguration conf = new NeuralNetConfiguration.Builder()
				.seed(params.getSeed())
				.optimizationAlgo(params.getOptimizationAlgorithm())
				.updater(params.getUpdater())
				.weightInit(params.getWeightInit())
				.dist(new TruncatedNormalDistribution(0.0, 0.5))
				.l2(5e-5)
				.miniBatch(true)
				.cacheMode(params.getCacheMode())
                                .trainingWorkspaceMode(params.getWorkspaceMode())
                                .inferenceWorkspaceMode(params.getWorkspaceMode())
				.graphBuilder()
				.addInputs("input")
                                .setInputTypes(InputType.convolutional(params.getHeight(), params.getWidth(), params.getChannels()))
				
                // Contracting path
                
                .addLayer("conv1-1", new ConvolutionLayer.Builder()
                		.convolutionMode(ConvolutionMode.Same)
                		.cudnnAlgoMode(params.getCudnnAlgoMode())
                		.activation(params.getActivation())
                		.kernelSize(3, 3)
                		.stride(1, 1)
                		.nIn(params.getChannels())
                		.nOut(64)
                		.build(), "input")
                .addLayer("conv1-2", new ConvolutionLayer.Builder()
                		.convolutionMode(ConvolutionMode.Same)
                		.cudnnAlgoMode(params.getCudnnAlgoMode())
                		.activation(params.getActivation())
                		.kernelSize(3, 3)
                		.stride(1, 1)
                		.nOut(64)
                		.build(), "conv1-1")
                .addLayer("pool1", new SubsamplingLayer.Builder()
                		.poolingType(SubsamplingLayer.PoolingType.MAX)
                		.kernelSize(2, 2)
                		.build(), "conv1-2")
                
                .addLayer("conv2-1", new ConvolutionLayer.Builder()
                		.convolutionMode(ConvolutionMode.Same)
                		.cudnnAlgoMode(params.getCudnnAlgoMode())
                		.activation(params.getActivation())
                		.kernelSize(3, 3)
                		.stride(1, 1)
                		.nOut(128)
                		.build(), "pool1")
                .addLayer("conv2-2", new ConvolutionLayer.Builder()
                		.convolutionMode(ConvolutionMode.Same)
                		.cudnnAlgoMode(params.getCudnnAlgoMode())
                		.activation(params.getActivation())
                		.kernelSize(3, 3)
                		.stride(1, 1)
                		.nOut(128)
                		.build(), "conv2-1")
                .addLayer("pool2", new SubsamplingLayer.Builder()
                		.poolingType(SubsamplingLayer.PoolingType.MAX)
                		.kernelSize(2, 2)
                		.build(), "conv2-2")
                
                .addLayer("conv3-1", new ConvolutionLayer.Builder()
                		.convolutionMode(ConvolutionMode.Same)
                		.cudnnAlgoMode(params.getCudnnAlgoMode())
                		.activation(params.getActivation())
                		.kernelSize(3, 3)
                		.stride(1, 1)
                		.nOut(256)
                		.build(), "pool2")
                .addLayer("conv3-2", new ConvolutionLayer.Builder()
                		.convolutionMode(ConvolutionMode.Same)
                		.cudnnAlgoMode(params.getCudnnAlgoMode())
                		.activation(params.getActivation())
                		.kernelSize(3, 3)
                		.stride(1, 1)
                		.nOut(256)
                		.build(), "conv3-1")
                .addLayer("pool3", new SubsamplingLayer.Builder()
                		.poolingType(SubsamplingLayer.PoolingType.MAX)
                		.kernelSize(2, 2)
                		.build(), "conv3-2")
                
                .addLayer("conv4-1", new ConvolutionLayer.Builder()
                		.convolutionMode(ConvolutionMode.Same)
                		.cudnnAlgoMode(params.getCudnnAlgoMode())
                		.activation(params.getActivation())
                		.kernelSize(3, 3)
                		.stride(1, 1)
                		.nOut(512)
                		.build(), "pool3")
                .addLayer("conv4-2", new ConvolutionLayer.Builder()
                		.convolutionMode(ConvolutionMode.Same)
                		.cudnnAlgoMode(params.getCudnnAlgoMode())
                		.activation(params.getActivation())
                		.kernelSize(3, 3)
                		.stride(1, 1)
                		.nOut(512)
                		.build(), "conv4-1")
                .addLayer("drop4", new DropoutLayer.Builder(0.5).build(), "conv4-2")
                .addLayer("pool4", new SubsamplingLayer.Builder()
                		.poolingType(SubsamplingLayer.PoolingType.MAX)
                		.kernelSize(2, 2)
                		.build(), "drop4")
                
                .addLayer("conv5-1", new ConvolutionLayer.Builder()
                		.convolutionMode(ConvolutionMode.Same)
                		.cudnnAlgoMode(params.getCudnnAlgoMode())
                		.activation(params.getActivation())
                		.kernelSize(3, 3)
                		.stride(1, 1)
                		.nOut(1024)
                		.build(), "pool4")
                .addLayer("conv5-2", new ConvolutionLayer.Builder()
                		.convolutionMode(ConvolutionMode.Same)
                		.cudnnAlgoMode(params.getCudnnAlgoMode())
                		.activation(params.getActivation())
                		.kernelSize(3, 3)
                		.stride(1, 1)
                		.nOut(1024)
                		.build(), "conv5-1")
                .addLayer("drop5", new DropoutLayer.Builder(0.5).build(), "conv5-2")
                
                // Expansive path
                
                .addLayer("up6-1", new Upsampling2D.Builder(2).build(), "drop5")
                .addLayer("up6-2", new ConvolutionLayer.Builder()
                		.convolutionMode(ConvolutionMode.Same)
                		.cudnnAlgoMode(params.getCudnnAlgoMode())
                		.activation(params.getActivation())
                		.kernelSize(2, 2)
                		.stride(1, 1)
                		.nOut(512)
                		.build(), "up6-1")
                .addVertex("merge6", new MergeVertex(), "drop4", "up6-2")
                .addLayer("conv6-1", new ConvolutionLayer.Builder()
                		.convolutionMode(ConvolutionMode.Same)
                		.cudnnAlgoMode(params.getCudnnAlgoMode())
                		.activation(params.getActivation())
                		.kernelSize(3, 3)
                		.stride(1, 1)
                		.nOut(512)
                		.build(), "merge6")
                .addLayer("conv6-2", new ConvolutionLayer.Builder()
                		.convolutionMode(ConvolutionMode.Same)
                		.cudnnAlgoMode(params.getCudnnAlgoMode())
                		.activation(params.getActivation())
                		.kernelSize(3, 3)
                		.stride(1, 1)
                		.nOut(512)
                		.build(), "conv6-1")
                
                .addLayer("up7-1", new Upsampling2D.Builder(2).build(), "conv6-2")
                .addLayer("up7-2", new ConvolutionLayer.Builder()
                		.convolutionMode(ConvolutionMode.Same)
                		.cudnnAlgoMode(params.getCudnnAlgoMode())
                		.activation(params.getActivation())
                		.kernelSize(2, 2)
                		.stride(1, 1)
                		.nOut(256)
                		.build(), "up7-1")
                .addVertex("merge7", new MergeVertex(), "conv3-2", "up7-2")
                .addLayer("conv7-1", new ConvolutionLayer.Builder()
                		.convolutionMode(ConvolutionMode.Same)
                		.cudnnAlgoMode(params.getCudnnAlgoMode())
                		.activation(params.getActivation())
                		.kernelSize(3, 3)
                		.stride(1, 1)
                		.nOut(256)
                		.build(), "merge7")
                .addLayer("conv7-2", new ConvolutionLayer.Builder()
                		.convolutionMode(ConvolutionMode.Same)
                		.cudnnAlgoMode(params.getCudnnAlgoMode())
                		.activation(params.getActivation())
                		.kernelSize(3, 3)
                		.stride(1, 1)
                		.nOut(256)
                		.build(), "conv7-1")
                
                .addLayer("up8-1", new Upsampling2D.Builder(2).build(), "conv7-2")
                .addLayer("up8-2", new ConvolutionLayer.Builder()
                		.convolutionMode(ConvolutionMode.Same)
                		.cudnnAlgoMode(params.getCudnnAlgoMode())
                		.activation(params.getActivation())
                		.kernelSize(2, 2)
                		.stride(1, 1)
                		.nOut(128)
                		.build(), "up8-1")
                .addVertex("merge8", new MergeVertex(), "conv2-2", "up8-2")
                .addLayer("conv8-1", new ConvolutionLayer.Builder()
                		.convolutionMode(ConvolutionMode.Same)
                		.cudnnAlgoMode(params.getCudnnAlgoMode())
                		.activation(params.getActivation())
                		.kernelSize(3, 3)
                		.stride(1, 1)
                		.nOut(128)
                		.build(), "merge8")
                .addLayer("conv8-2", new ConvolutionLayer.Builder()
                		.convolutionMode(ConvolutionMode.Same)
                		.cudnnAlgoMode(params.getCudnnAlgoMode())
                		.activation(params.getActivation())
                		.kernelSize(3, 3)
                		.stride(1, 1)
                		.nOut(128)
                		.build(), "conv8-1")
                
                .addLayer("up9-1", new Upsampling2D.Builder(2).build(), "conv8-2")
                .addLayer("up9-2", new ConvolutionLayer.Builder()
                		.convolutionMode(ConvolutionMode.Same)
                		.cudnnAlgoMode(params.getCudnnAlgoMode())
                		.activation(params.getActivation())
                		.kernelSize(2, 2)
                		.stride(1, 1)
                		.nOut(64)
                		.build(), "up9-1")
                .addVertex("merge9", new MergeVertex(), "conv1-2", "up9-2")
                .addLayer("conv9-1", new ConvolutionLayer.Builder()
                		.convolutionMode(ConvolutionMode.Same)
                		.cudnnAlgoMode(params.getCudnnAlgoMode())
                		.activation(params.getActivation())
                		.kernelSize(3, 3)
                		.stride(1, 1)
                		.nOut(64)
                		.build(), "merge9")
                .addLayer("conv9-2", new ConvolutionLayer.Builder()
                		.convolutionMode(ConvolutionMode.Same)
                		.cudnnAlgoMode(params.getCudnnAlgoMode())
                		.activation(params.getActivation())
                		.kernelSize(3, 3)
                		.stride(1, 1)
                		.nOut(64)
                		.build(), "conv9-1")
                .addLayer("conv9-3", new ConvolutionLayer.Builder()
                		.convolutionMode(ConvolutionMode.Same)
                		.cudnnAlgoMode(params.getCudnnAlgoMode())
                		.activation(params.getActivation())
                		.kernelSize(3, 3)
                		.stride(1, 1)
                		.nOut(2)
                		.build(), "conv9-2")
                
                .addLayer("conv10", new ConvolutionLayer.Builder()
                		.convolutionMode(ConvolutionMode.Same)
                		.cudnnAlgoMode(params.getCudnnAlgoMode())
                		.activation(Activation.IDENTITY)
                		.kernelSize(3, 3)
                		.stride(1, 1)
                		.nOut(1)
                		.build(), "conv9-3")
                
                .addLayer("output", new CnnLossLayer.Builder(LossFunctions.LossFunction.XENT)
                        .activation(Activation.SIGMOID)
                        .build(), "conv10")
                
				.setOutputs("output")
				.build();
				
		return new ComputationGraph(conf);		
	}
}
